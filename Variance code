import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generating synthetic time series data
np.random.seed(42)
time_index = pd.date_range(start='2023-01-01', periods=365, freq='D')
data = np.sin(np.linspace(0, 2*np.pi, 365)) + np.random.normal(0, 0.2, 365)
ts_data = pd.Series(data, index=time_index)

# Initialize segmentation parameters
segment_length = 30  # Initial segment length
segments = [ts_data.index[0]]  # Initial list of segment start points

# Plot the initial time series data
plt.figure(figsize=(10, 6))
plt.plot(ts_data.index, ts_data.values, label='Original Data')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Original Time Series Data')
plt.legend()
plt.show()

# Adaptive segmentation algorithm based on moving average variance
for i in range(segment_length, len(ts_data), segment_length):
    current_segment = ts_data.iloc[i - segment_length:i]
    
    # Calculate variance for the current segment
    segment_variance = current_segment.var()
    
    # Check variance change from previous segment
    if i > segment_length and segment_variance > 1.2 * previous_variance:
        segments.append(current_segment.index[0])
        segment_length = len(current_segment)
    
    previous_variance = segment_variance

# Plot segmented time series data
plt.figure(figsize=(10, 6))
for segment_start in segments:
    plt.plot(ts_data[segment_start:segment_start + segment_length].index,
             ts_data[segment_start:segment_start + segment_length].values,
             label='Segment')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Adaptive Segmentation of Time Series Data')
plt.legend()
plt.show()

# Display the identified segments
print("Identified Segments:")
for i, segment_start in enumerate(segments[:-1]):
    print(f"Segment {i + 1}: {segment_start} to {segments[i + 1]}")
